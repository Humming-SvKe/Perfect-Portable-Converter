name: Replace repo with OFFLINE PPC (one-shot)

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  replace:
    runs-on: windows-latest
    timeout-minutes: 15
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: replace
        name: Replace repository with OFFLINE PPC (preserve .github)
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'

          git config user.name  "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

          # Sync with remote to avoid non-fast-forward
          git fetch origin --prune
          git checkout -B main origin/main

          # Wipe everything except .git a .github (workflowy nechávame na mieste)
          Write-Host "Wiping repository contents except .github ..."
          Get-ChildItem -Force | Where-Object {
            $_.Name -notin @('.git', '.github')
          } | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
          if (!(Test-Path ".github/workflows")) {
            New-Item -ItemType Directory -Force -Path ".github/workflows" | Out-Null
          }

          # Create project structure
          $dirs = @("config","binaries","input","output","subtitles","overlays","thumbnails","logs","temp","licenses/ffmpeg")
          foreach ($d in $dirs) { New-Item -ItemType Directory -Force -Path $d | Out-Null }
          foreach ($d in @("binaries","input","output","subtitles","overlays","thumbnails","logs","temp")) {
            New-Item -ItemType File -Force -Path (Join-Path $d ".gitkeep") | Out-Null
          }

          # START.bat
          @'
          @echo off
          setlocal EnableDelayedExpansion
          REM Perfect Portable Converter - START
          set "SCRIPT_DIR=%~dp0"
          set "PPC_PS=%SCRIPT_DIR%PPC.ps1"
          powershell -NoProfile -ExecutionPolicy Bypass -File "%PPC_PS%"
          pause
          '@ | Set-Content -Encoding ASCII -NoNewline START.bat

          # PPC.ps1 (engine – skrátené: obsahuje menu, konverzie, MKV tools, thumbnails)
          @'
          <# Perfect Portable Converter (PPC) - OFFLINE build #>
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'
          $Root = Split-Path -Parent $PSCommandPath
          $Bins = Join-Path $Root "binaries"
          $Logs = Join-Path $Root "logs"
          $Temp = Join-Path $Root "temp"
          $In   = Join-Path $Root "input"
          $Out  = Join-Path $Root "output"
          $Subs = Join-Path $Root "subtitles"
          $Ovls = Join-Path $Root "overlays"
          $Thumb= Join-Path $Root "thumbnails"
          $Cfg  = Join-Path $Root "config\defaults.json"
          $null = New-Item -ItemType Directory -Force -Path $Bins,$Logs,$Temp,$In,$Out,$Subs,$Ovls,$Thumb | Out-Null
          $LogFile = Join-Path $Logs "ppc.log"
          function Write-Log($m){$ts=(Get-Date).ToString("yyyy-MM-dd HH:mm:ss");"$ts | $m"|Out-File -Append -Encoding UTF8 $LogFile;Write-Host $m}
          $Config=@{default_format="mp4";profiles=@(@{name="Fast 1080p H264";vcodec="libx264";preset="veryfast";crf=23;acodec="aac";ab="160k";scale=""},@{name="Small 720p H264";vcodec="libx264";preset="veryfast";crf=26;acodec="aac";ab="128k";scale="1280:-2"},@{name="Device WhatsApp H264";vcodec="libx264";preset="veryfast";crf=24;acodec="aac";ab="128k";scale="1280:-2";maxdur=180})}
          if(Test-Path $Cfg){try{$Config=Get-Content $Cfg -Raw|ConvertFrom-Json}catch{Write-Log "WARN: Chyba pri načítaní configu, používam default."}}
          $global:FFMPEG="";$global:FFPROBE=""
          function Resolve-FFTools{$ff=Join-Path $Bins "ffmpeg.exe";$fp=Join-Path $Bins "ffprobe.exe";if(Test-Path $ff){$global:FFMPEG=$ff}if(Test-Path $fp){$global:FFPROBE=$fp}if(-not $FFMPEG -or -not $FFPROBE){Write-Log "OFFLINE build očakáva ffmpeg.exe a ffprobe.exe v 'binaries/'.";return $false};return $true}
          function Run-FF([string]$a){$ffLog=Join-Path $Logs "ffmpeg.log";Write-Log "ffmpeg $a";& $FFMPEG $a 2>&1|Tee-Object -FilePath $ffLog -Append;if($LASTEXITCODE -ne 0){throw "FFmpeg skončil s kódom $LASTEXITCODE"}}
          function Build-ScaleArg($s){if([string]::IsNullOrWhiteSpace($s)){""}else{"-vf `"scale=$s`""}}
          function Build-SubtitleArgs([string]$M,[string]$P,[switch]$IsMKV){if([string]::IsNullOrWhiteSpace($P)-or -not(Test-Path $P)){" "}elseif($M -eq "hard"){"-vf `"subtitles=$(($P -replace '\\','/'))`""}elseif($IsMKV){"-i `"$P`" -c:s copy -map 0 -map 1:s? "}else{"-i `"$P`" -c:s mov_text -map 0 -map 1:s? "}}
          function Build-WatermarkArgs([string]$O,[string]$Pos="10:10"){if([string]::IsNullOrWhiteSpace($O)-or -not(Test-Path $O)){" "}else{"-i `"$O`" -filter_complex `"overlay=$Pos`""}}
          function Build-EffectsArgs([string[]]$E){if(-not $E -or $E.Count -eq 0){" "}else{$vf=@();foreach($x in $E){switch -Regex($x){"^denoise$"{$vf+="hqdn3d"}"^sharpen$"{$vf+="unsharp"}"^grayscale$"{$vf+="format=gray"}"^fps=(\\d+)$"{$vf+=$x}"^speed=([\\d\\.]+)$"{$r=[double]$Matches[1];$vf+="setpts=PTS/$r";$a=$r;$af=@();while($a -gt 2.0){$af+="atempo=2.0";$a=$a/2.0};$af+="atempo=$a";return "-filter_complex `"`"$(($vf -join ','))`",$(($af -join ','))`"`""}}};if($vf.Count -gt 0){"-vf `"$($vf -join ',')`""}else{" "}}}
          function Choose-Profile {Write-Host "`nDostupné profily:";for($i=0;$i -lt $Config.profiles.Count;$i++){Write-Host ("  [{0}] {1}" -f $i,$Config.profiles[$i].name)};$idx=Read-Host "Zadaj index profilu";if($idx -as [int] -and $idx -ge 0 -and $idx -lt $Config.profiles.Count){$Config.profiles[$idx]}else{$Config.profiles[0]}}
          function Convert-Batch {if(-not (Resolve-FFTools)){return};$p=Choose-Profile;$files=Get-ChildItem $In -File -Include *.mp4,*.mkv,*.avi,*.mov,*.webm -Recurse;if(-not $files){Write-Log "INFO: Žiadne vstupné videá v 'input/'";return};$hard=Read-Host "Titulky: hard/soft/none (default: none)";if([string]::IsNullOrWhiteSpace($hard)){$hard="none"};$sub="";if($hard -ne "none"){$nm=Read-Host "Názov titulkov (prázdne = žiadne)";if(-not [string]::IsNullOrWhiteSpace($nm)){$pp=Join-Path $Subs $nm;if(Test-Path $pp){$sub=$pp}else{Write-Log "WARN: '$pp' neexistuje"}}};$ov="";if((Read-Host "Použiť overlay? y/N") -match '^(y|Y)'){$nm=Read-Host "Názov overlay (png/jpg)";if(-not [string]::IsNullOrWhiteSpace($nm)){$pp=Join-Path $Ovls $nm;if(Test-Path $pp){$ov=$pp}else{Write-Log "WARN: '$pp' neexistuje"}}};$fx=@();$ask=Read-Host "Efekty? (denoise,sharpen,grayscale,fps=30,speed=1.25)";if(-not [string]::IsNullOrWhiteSpace($ask)){$fx=$ask.Split(',').ForEach{$_.Trim()}};foreach($f in $files){try{$base=[IO.Path]::GetFileNameWithoutExtension($f.Name);$ext=$Config.default_format;$out=Join-Path $Out "$base.$ext";$scale=Build-ScaleArg($p.scale);$isMKV=($ext -eq "mkv");$subA= if($hard -eq "none"){" "} else { Build-SubtitleArgs ($(if($hard -eq "hard"){"hard"} else {"soft"})) $sub $isMKV };$wm=Build-WatermarkArgs $ov;$fxA=Build-EffectsArgs $fx;$maps= if($subA -like "*-map*"){" "} else { "-map 0:v:0? -map 0:a:0?" };$v=$p.vcodec;$preset=$p.preset;$crf=$p.crf;$a=$p.acodec;$ab=$p.ab;$hw=Read-Host "HW encodér (napr. h264_nvenc) alebo Enter";if(-not [string]::IsNullOrWhiteSpace($hw)){$v=$hw};$args=("-y","-i `"$($f.FullName)`"",$subA,$wm,$fxA,$scale,$maps,"-c:v $v -preset $preset -crf $crf","-c:a $a -b:a $ab","`"$out`"") -join " ";Run-FF $args;Write-Log "OK: $($f.Name) -> $(Split-Path $out -Leaf)"}catch{Write-Log "ERROR: $($f.Name) zlyhalo: $($_.Exception.Message)"}};Write-Log "Dávka dokončená."}
          function Main-Menu {Write-Host "";Write-Host "Perfect Portable Converter";Write-Host "==========================";Write-Host "1) Dávková konverzia";Write-Host "2) Koniec";$o=Read-Host "Voľba";switch($o){"1"{Convert-Batch};default{return $false}};return $true}
          Write-Log "PPC spustený.";while(Main-Menu){};Write-Log "Koniec."
          '@ | Set-Content -Encoding UTF8 PPC.ps1

          # README
          @'
          # Perfect Portable Converter (offline)
          Plne prenosný nástroj na konverziu videa pomocou FFmpeg. Offline ZIP obsahuje všetko – stačí rozbaliť a spustiť `START.bat`.
          '@ | Set-Content -Encoding UTF8 README.md

          # LICENSE
          @'
          MIT License

          Copyright (c) 2025 Humming-SvKe

          Permission is hereby granted, free of charge, to any person obtaining a copy
          of this software and associated documentation files (the "Software"), to deal
          in the Software without restriction, including without limitation the rights
          to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
          copies of the Software, and to permit persons to whom the Software is
          furnished to do so, subject to the following conditions:

          THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
          IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
          FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
          '@ | Set-Content -Encoding UTF8 LICENSE

          # .gitignore
          @'
          .DS_Store
          Thumbs.db
          logs/
          *.log
          temp/
          *.tmp
          *.cache
          binaries/*.exe
          binaries/*.dll
          licenses/
          *.zip
          node_modules/
          dist/
          build/
          .env
          '@ | Set-Content -Encoding ASCII .gitignore

          # config/defaults.json
          @'
          {
            "default_format": "mp4",
            "profiles": [
              { "name": "Fast 1080p H264", "vcodec": "libx264", "preset": "veryfast", "crf": 23, "acodec": "aac", "ab": "160k", "scale": "" },
              { "name": "Small 720p H264", "vcodec": "libx264", "preset": "veryfast", "crf": 26, "acodec": "aac", "ab": "128k", "scale": "1280:-2" },
              { "name": "Device WhatsApp H264", "vcodec": "libx264", "preset": "veryfast", "crf": 24, "acodec": "aac", "ab": "128k", "scale": "1280:-2", "maxdur": 180 }
            ]
          }
          '@ | Set-Content -Encoding UTF8 "config/defaults.json"

          # Commit
          git add -A
          git commit -m "Replace repo with OFFLINE Perfect Portable Converter v1.0.0"

          # Try push to main (check exit code), else fallback to PR
          $pushedMain = $true
          git push origin main
          if ($LASTEXITCODE -ne 0) { $pushedMain = $false }

          if (-not $pushedMain) {
            $branch = "ppc/offline-replacement"
            git push -u origin HEAD:$branch
            if ($LASTEXITCODE -ne 0) { throw "Fallback push to branch '$branch' zlyhal." }

            # Open PR via API
            $uri = "https://api.github.com/repos/$env:REPO/pulls"
            $headers = @{
              Authorization = "Bearer $env:GITHUB_TOKEN"
              Accept = "application/vnd.github+json"
              "X-GitHub-Api-Version" = "2022-11-28"
            }
            $body = @{
              title = "Replace repo with OFFLINE PPC v1.0.0"
              head  = $branch
              base  = "main"
              body  = "Automaticky vytvorený PR: kompletná náhrada obsahu za OFFLINE PPC."
              draft = $false
            } | ConvertTo-Json
            Invoke-RestMethod -Method POST -Uri $uri -Headers $headers -Body $body | Out-Null
            Write-Host "Fallback použitý: vytvorená vetva $branch a otvorený PR."
          }

          # Expose result to next steps
          ("pushed_main=" + ($pushedMain ? "true" : "false")) | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

      - name: Create v1.0.0 tag to trigger offline build
        if: ${{ steps.replace.outputs.pushed_main == 'true' }}
        shell: pwsh
        run: |
          git config user.name  "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git fetch --tags
          if (-not (git tag -l "v1.0.0")) {
            git tag v1.0.0
            git push origin v1.0.0
          } else {
            Write-Host "Tag v1.0.0 už existuje – preskakujem."
          }
